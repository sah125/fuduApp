{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport instance from \"../../axios/axios-instance\";\nexport var FORGOT_PASSWORD_REQUEST = \"FORGOT_PASSWORD_REQUEST\";\nexport var FORGOT_PASSWORD_SUCCESS = \"FORGOT_PASSWORD_SUCCESS\";\nexport var FORGOT_PASSWORD_FAILURE = \"FORGOT_PASSWORD_FAILURE\";\nexport var loginRequest = function loginRequest(credentials) {\n  return {\n    type: \"LOGIN_REQUEST\",\n    payload: credentials\n  };\n};\nexport var loginSuccess = function loginSuccess(user) {\n  return {\n    type: \"LOGIN_SUCCESS\",\n    payload: {\n      user: user\n    }\n  };\n};\nexport var loginFailure = function loginFailure(error) {\n  return {\n    type: \"LOGIN_FAILURE\",\n    payload: {\n      error: error\n    }\n  };\n};\nexport var forgotPasswordRequest = function forgotPasswordRequest() {\n  return {\n    type: FORGOT_PASSWORD_REQUEST\n  };\n};\nexport var forgotPasswordSuccess = function forgotPasswordSuccess() {\n  return {\n    type: FORGOT_PASSWORD_SUCCESS\n  };\n};\nexport var forgotPasswordFailure = function forgotPasswordFailure(error) {\n  return {\n    type: FORGOT_PASSWORD_FAILURE,\n    payload: {\n      error: error\n    }\n  };\n};\nexport var forgotPassword = function forgotPassword(email) {\n  return function () {\n    var _ref = _asyncToGenerator(function* (dispatch) {\n      dispatch(forgotPasswordRequest());\n      try {\n        yield instance.post(\"/Auth/forgotPassword\", {\n          email: email\n        });\n        dispatch(forgotPasswordSuccess());\n      } catch (error) {\n        console.log(error.message);\n        dispatch(forgotPasswordFailure(error.message));\n      }\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var login = function login(credentials) {\n  return function () {\n    var _ref2 = _asyncToGenerator(function* (dispatch) {\n      dispatch(loginRequest(credentials));\n      try {\n        var response = yield instance.post(\"/Auth/login\", credentials);\n        var user = response.data;\n        dispatch(loginSuccess(user));\n      } catch (error) {\n        console.log(error.message);\n        dispatch(loginFailure(error.message));\n      }\n    });\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"names":["instance","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_FAILURE","loginRequest","credentials","type","payload","loginSuccess","user","loginFailure","error","forgotPasswordRequest","forgotPasswordSuccess","forgotPasswordFailure","forgotPassword","email","_ref","_asyncToGenerator","dispatch","post","console","log","message","_x","apply","arguments","login","_ref2","response","data","_x2"],"sources":["/Users/rodwellshibambu/Documents/resapp/Fudu App/redux/Actions/auth.Actions.ts"],"sourcesContent":["import { Action } from \"redux\";\nimport { ILogin } from \"../../core/login\";\nimport { ThunkAction } from \"redux-thunk\";\nimport axios from \"axios\";\nimport instance from \"../../axios/axios-instance\";\n\nexport const FORGOT_PASSWORD_REQUEST = \"FORGOT_PASSWORD_REQUEST\";\nexport const FORGOT_PASSWORD_SUCCESS = \"FORGOT_PASSWORD_SUCCESS\";\nexport const FORGOT_PASSWORD_FAILURE = \"FORGOT_PASSWORD_FAILURE\";\n\nexport interface ForgotPasswordRequestAction extends Action<typeof FORGOT_PASSWORD_REQUEST> {\n}\n\nexport interface ForgotPasswordSuccessAction extends Action<typeof FORGOT_PASSWORD_SUCCESS> {\n}\n\nexport interface ForgotPasswordFailureAction extends Action<typeof FORGOT_PASSWORD_FAILURE> {\n  payload: {\n    error: string;\n  };\n}\n\n\nexport interface LoginRequestAction extends Action<\"LOGIN_REQUEST\"> {\n  payload: ILogin;\n}\n\nexport interface LoginSuccessAction extends Action<\"LOGIN_SUCCESS\"> {\n  payload: {\n    user: any;\n  };\n}\n\nexport interface LoginFailureAction extends Action<\"LOGIN_FAILURE\"> {\n  payload: {\n    error: string;\n  };\n}\n\nexport type AuthAction =\n  | LoginRequestAction\n  | LoginSuccessAction\n  | LoginFailureAction\n  | ForgotPasswordRequestAction\n  | ForgotPasswordSuccessAction\n  | ForgotPasswordFailureAction;\n\n\n\nexport const loginRequest = (credentials: ILogin): LoginRequestAction => ({\n  type: \"LOGIN_REQUEST\",\n  payload: credentials,\n});\n\nexport const loginSuccess = (user: any): LoginSuccessAction => ({\n  type: \"LOGIN_SUCCESS\",\n  payload: { user },\n});\n\nexport const loginFailure = (error: string): LoginFailureAction => ({\n  type: \"LOGIN_FAILURE\",\n  payload: { error },\n});\n\nexport const forgotPasswordRequest = (): ForgotPasswordRequestAction => ({\n  type: FORGOT_PASSWORD_REQUEST,\n});\n\nexport const forgotPasswordSuccess = (): ForgotPasswordSuccessAction => ({\n  type: FORGOT_PASSWORD_SUCCESS,\n});\n\nexport const forgotPasswordFailure = (error: string): ForgotPasswordFailureAction => ({\n  type: FORGOT_PASSWORD_FAILURE,\n  payload: { error },\n});\n\n// Thunk for \"forgot password\" functionality\nexport const forgotPassword = (email: string): ThunkAction<void, any, unknown, AuthAction> => {\n  return async (dispatch) => {\n    dispatch(forgotPasswordRequest());\n    try {\n      await instance.post(\"/Auth/forgotPassword\", { email });\n      dispatch(forgotPasswordSuccess());\n    } catch (error: any) {\n      console.log(error.message);\n      dispatch(forgotPasswordFailure(error.message));\n    }\n  };\n};\n\n\n\n\n\n\n\n\nexport const login = (\n  credentials: ILogin\n): ThunkAction<void, any, unknown, AuthAction> => {\n  return async (dispatch) => {\n    dispatch(loginRequest(credentials));\n    try {\n      // Make a POST request to your login API endpoint\n      const response = await instance.post(\"/Auth/login\", credentials);\n\n      // Assuming the API response contains the user data\n      const user: any = response.data;\n\n      dispatch(loginSuccess(user));\n    } catch (error: any) {\n      console.log(error.message)\n      dispatch(loginFailure(error.message));\n    }\n  };\n};\n"],"mappings":";AAIA,OAAOA,QAAQ;AAEf,OAAO,IAAMC,uBAAuB,GAAG,yBAAyB;AAChE,OAAO,IAAMC,uBAAuB,GAAG,yBAAyB;AAChE,OAAO,IAAMC,uBAAuB,GAAG,yBAAyB;AAyChE,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,WAAmB;EAAA,OAA0B;IACxEC,IAAI,EAAE,eAAe;IACrBC,OAAO,EAAEF;EACX,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAYA,CAAIC,IAAS;EAAA,OAA0B;IAC9DH,IAAI,EAAE,eAAe;IACrBC,OAAO,EAAE;MAAEE,IAAI,EAAJA;IAAK;EAClB,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAa;EAAA,OAA0B;IAClEL,IAAI,EAAE,eAAe;IACrBC,OAAO,EAAE;MAAEI,KAAK,EAALA;IAAM;EACnB,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA;EAAA,OAAuC;IACvEN,IAAI,EAAEL;EACR,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMY,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA;EAAA,OAAuC;IACvEP,IAAI,EAAEJ;EACR,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMY,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIH,KAAa;EAAA,OAAmC;IACpFL,IAAI,EAAEH,uBAAuB;IAC7BI,OAAO,EAAE;MAAEI,KAAK,EAALA;IAAM;EACnB,CAAC;AAAA,CAAC;AAGF,OAAO,IAAMI,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,KAAa,EAAkD;EAC5F;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAO,WAAOC,QAAQ,EAAK;MACzBA,QAAQ,CAACP,qBAAqB,CAAC,CAAC,CAAC;MACjC,IAAI;QACF,MAAMZ,QAAQ,CAACoB,IAAI,CAAC,sBAAsB,EAAE;UAAEJ,KAAK,EAALA;QAAM,CAAC,CAAC;QACtDG,QAAQ,CAACN,qBAAqB,CAAC,CAAC,CAAC;MACnC,CAAC,CAAC,OAAOF,KAAU,EAAE;QACnBU,OAAO,CAACC,GAAG,CAACX,KAAK,CAACY,OAAO,CAAC;QAC1BJ,QAAQ,CAACL,qBAAqB,CAACH,KAAK,CAACY,OAAO,CAAC,CAAC;MAChD;IACF,CAAC;IAAA,iBAAAC,EAAA;MAAA,OAAAP,IAAA,CAAAQ,KAAA,OAAAC,SAAA;IAAA;EAAA;AACH,CAAC;AASD,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAChBtB,WAAmB,EAC6B;EAChD;IAAA,IAAAuB,KAAA,GAAAV,iBAAA,CAAO,WAAOC,QAAQ,EAAK;MACzBA,QAAQ,CAACf,YAAY,CAACC,WAAW,CAAC,CAAC;MACnC,IAAI;QAEF,IAAMwB,QAAQ,SAAS7B,QAAQ,CAACoB,IAAI,CAAC,aAAa,EAAEf,WAAW,CAAC;QAGhE,IAAMI,IAAS,GAAGoB,QAAQ,CAACC,IAAI;QAE/BX,QAAQ,CAACX,YAAY,CAACC,IAAI,CAAC,CAAC;MAC9B,CAAC,CAAC,OAAOE,KAAU,EAAE;QACnBU,OAAO,CAACC,GAAG,CAACX,KAAK,CAACY,OAAO,CAAC;QAC1BJ,QAAQ,CAACT,YAAY,CAACC,KAAK,CAACY,OAAO,CAAC,CAAC;MACvC;IACF,CAAC;IAAA,iBAAAQ,GAAA;MAAA,OAAAH,KAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;EAAA;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}