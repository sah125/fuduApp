{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport instance from \"../../axios/axios-instance\";\nexport var loginRequest = function loginRequest(credentials) {\n  return {\n    type: \"LOGIN_REQUEST\",\n    payload: credentials\n  };\n};\nexport var loginSuccess = function loginSuccess(user) {\n  return {\n    type: \"LOGIN_SUCCESS\",\n    payload: {\n      user: user\n    }\n  };\n};\nexport var loginFailure = function loginFailure(error) {\n  return {\n    type: \"LOGIN_FAILURE\",\n    payload: {\n      error: error\n    }\n  };\n};\nexport var login = function login(credentials) {\n  return function () {\n    var _ref = _asyncToGenerator(function* (dispatch) {\n      dispatch(loginRequest(credentials));\n      try {\n        var response = yield instance.post(\"/Auth/login\", credentials);\n        var user = response.data;\n        dispatch(loginSuccess(user));\n      } catch (error) {\n        console.log(error.message);\n        dispatch(loginFailure(error.message));\n      }\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"names":["instance","loginRequest","credentials","type","payload","loginSuccess","user","loginFailure","error","login","_ref","_asyncToGenerator","dispatch","response","post","data","console","log","message","_x","apply","arguments"],"sources":["/Users/rodwellshibambu/Documents/resapp/Fudu App/redux/Actions/auth.Actions.ts"],"sourcesContent":["import { Action } from \"redux\";\nimport { ILogin } from \"../../core/login\";\nimport { ThunkAction } from \"redux-thunk\";\nimport axios from \"axios\";\nimport instance from \"../../axios/axios-instance\";\n\nexport interface LoginRequestAction extends Action<\"LOGIN_REQUEST\"> {\n  payload: ILogin;\n}\n\nexport interface LoginSuccessAction extends Action<\"LOGIN_SUCCESS\"> {\n  payload: {\n    user: any;\n  };\n}\n\nexport interface LoginFailureAction extends Action<\"LOGIN_FAILURE\"> {\n  payload: {\n    error: string;\n  };\n}\n\nexport type AuthAction =\n  | LoginRequestAction\n  | LoginSuccessAction\n  | LoginFailureAction;\n\nexport const loginRequest = (credentials: ILogin): LoginRequestAction => ({\n  type: \"LOGIN_REQUEST\",\n  payload: credentials,\n});\n\nexport const loginSuccess = (user: any): LoginSuccessAction => ({\n  type: \"LOGIN_SUCCESS\",\n  payload: { user },\n});\n\nexport const loginFailure = (error: string): LoginFailureAction => ({\n  type: \"LOGIN_FAILURE\",\n  payload: { error },\n});\n\nexport const login = (\n  credentials: ILogin\n): ThunkAction<void, any, unknown, AuthAction> => {\n  return async (dispatch) => {\n    dispatch(loginRequest(credentials));\n    try {\n      // Make a POST request to your login API endpoint\n      const response = await instance.post(\"/Auth/login\", credentials);\n\n      // Assuming the API response contains the user data\n      const user: any = response.data;\n\n      dispatch(loginSuccess(user));\n    } catch (error: any) {\n      console.log(error.message)\n      dispatch(loginFailure(error.message));\n    }\n  };\n};\n"],"mappings":";AAIA,OAAOA,QAAQ;AAuBf,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,WAAmB;EAAA,OAA0B;IACxEC,IAAI,EAAE,eAAe;IACrBC,OAAO,EAAEF;EACX,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAYA,CAAIC,IAAS;EAAA,OAA0B;IAC9DH,IAAI,EAAE,eAAe;IACrBC,OAAO,EAAE;MAAEE,IAAI,EAAJA;IAAK;EAClB,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAa;EAAA,OAA0B;IAClEL,IAAI,EAAE,eAAe;IACrBC,OAAO,EAAE;MAAEI,KAAK,EAALA;IAAM;EACnB,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAChBP,WAAmB,EAC6B;EAChD;IAAA,IAAAQ,IAAA,GAAAC,iBAAA,CAAO,WAAOC,QAAQ,EAAK;MACzBA,QAAQ,CAACX,YAAY,CAACC,WAAW,CAAC,CAAC;MACnC,IAAI;QAEF,IAAMW,QAAQ,SAASb,QAAQ,CAACc,IAAI,CAAC,aAAa,EAAEZ,WAAW,CAAC;QAGhE,IAAMI,IAAS,GAAGO,QAAQ,CAACE,IAAI;QAE/BH,QAAQ,CAACP,YAAY,CAACC,IAAI,CAAC,CAAC;MAC9B,CAAC,CAAC,OAAOE,KAAU,EAAE;QACnBQ,OAAO,CAACC,GAAG,CAACT,KAAK,CAACU,OAAO,CAAC;QAC1BN,QAAQ,CAACL,YAAY,CAACC,KAAK,CAACU,OAAO,CAAC,CAAC;MACvC;IACF,CAAC;IAAA,iBAAAC,EAAA;MAAA,OAAAT,IAAA,CAAAU,KAAA,OAAAC,SAAA;IAAA;EAAA;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}